class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        Map<Integer, Integer> remainderFreq = new HashMap<>();
        remainderFreq.put(0, 1);  // Initialize the frequency of remainder 0 as 1
        int sum = 0;
        int count = 0;

        for (int num : nums) {
            sum = (sum + num) % k;  // Calculate the running sum and its remainder

            if (sum < 0) {
                // To handle negative remainders, add k to make it positive
                sum += k;
            }

            // If the remainder already exists in the hashmap, add its frequency to the count
            if (remainderFreq.containsKey(sum)) {
                count += remainderFreq.get(sum);
            }

            // Update the frequency of the current remainder
            remainderFreq.put(sum, remainderFreq.getOrDefault(sum, 0) + 1);
        }

        return count;
    }
}
