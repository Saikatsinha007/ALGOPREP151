import java.io.*;
import java.util.*;

public class Main {

  public static class HashMap<K, V> {
    private class HMNode {
      K key;
      V value;

      HMNode(K key, V value) {
        this.key = key;
        this.value = value;
      }
    }

    private int size; // n
    private LinkedList<HMNode>[] buckets; // N = buckets.length

    public HashMap() {
      initbuckets(4);
      size = 0;
    }

    private void initbuckets(int N) {
      buckets = new LinkedList[N];
      for (int bi = 0; bi < buckets.length; bi++) {
        buckets[bi] = new LinkedList<>();
      }
    }

    private int hashFunction(K key) {
      int hashCode = key.hashCode();
      return Math.abs(hashCode) % buckets.length;
    }

    private int findBucketIndex(int hash) {
      return hash % buckets.length;
    }

    private HMNode findWithinBucket(LinkedList<HMNode> bucket, K key) {
      for (HMNode node : bucket) {
        if (node.key.equals(key)) {
          return node;
        }
      }
      return null;
    }

    public void put(K key, V value) throws Exception {
      int hash = hashFunction(key);
      int bucketIndex = findBucketIndex(hash);
      LinkedList<HMNode> bucket = buckets[bucketIndex];
      HMNode node = findWithinBucket(bucket, key);

      if (node != null) {
        // Key already exists, update the value
        node.value = value;
      } else {
        // Key doesn't exist, add a new node to the bucket
        bucket.addLast(new HMNode(key, value));
        size++;

        // Check if rehashing is required (load factor > 0.75)
        double loadFactor = (1.0 * size) / buckets.length;
        if (loadFactor > 0.75) {
          rehash();
        }
      }
    }

    public V get(K key) throws Exception {
      int hash = hashFunction(key);
      int bucketIndex = findBucketIndex(hash);
      LinkedList<HMNode> bucket = buckets[bucketIndex];
      HMNode node = findWithinBucket(bucket, key);

      if (node != null) {
        // Key found, return the value
        return node.value;
      } else {
        // Key not found
        return null;
      }
    }

    public boolean containsKey(K key) {
      int hash = hashFunction(key);
      int bucketIndex = findBucketIndex(hash);
      LinkedList<HMNode> bucket = buckets[bucketIndex];
      HMNode node = findWithinBucket(bucket, key);

      return node != null;
    }

    public V remove(K key) throws Exception {
      int hash = hashFunction(key);
      int bucketIndex = findBucketIndex(hash);
      LinkedList<HMNode> bucket = buckets[bucketIndex];
      HMNode node = findWithinBucket(bucket, key);

      if (node != null) {
        // Key found, remove the node from the bucket
        bucket.remove(node);
        size--;
        return node.value;
      } else {
        // Key not found
        return null;
      }
    }

    public ArrayList<K> keyset() throws Exception {
      ArrayList<K> keys = new ArrayList<>();

      for (LinkedList<HMNode> bucket : buckets) {
        for (HMNode node : bucket) {
          keys.add(node.key);
        }
      }

      return keys;
    }

    public int size() {
      return size;
    }

    private void rehash() {
      LinkedList<HMNode>[] oldBuckets = buckets;
      initbuckets(2 * oldBuckets.length);
      size = 0;

      for (LinkedList<HMNode> bucket : oldBuckets) {
        for (HMNode node : bucket) {
          try {
            put(node.key, node.value);
          } catch (Exception e) {
            // Handle exception if required
          }
        }
      }
    }

    public void display() {
      System.out.println("Display Begins");
      for (int bi = 0; bi < buckets.length; bi++) {
        System.out.print("Bucket " + bi + ": ");
        for (HMNode node : buckets[bi]) {
          System.out.print(node.key + "@" + node.value + " ");
        }
        System.out.println();
      }
      System.out.println("Display Ends");
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    HashMap<String, Integer> map = new HashMap<>();

    String str = br.readLine();
    while (!str.equals("quit")) {
      if (str.startsWith("put")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        Integer val = Integer.parseInt(parts[2]);
        map.put(key, val);
      } else if (str.startsWith("get")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.get(key));
      } else if (str.startsWith("containsKey")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.containsKey(key));
      } else if (str.startsWith("remove")) {
        String[] parts = str.split(" ");
        String key = parts[1];
        System.out.println(map.remove(key));
      } else if (str.startsWith("size")) {
        System.out.println(map.size());
      } else if (str.startsWith("keyset")) {
        System.out.println(map.keyset());
      } else if (str.startsWith("display")) {
        map.display();
      }
      str = br.readLine();
    }
  }
}
